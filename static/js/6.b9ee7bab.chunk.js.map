{"version":3,"sources":["components/Users/users.module.css","components/common/paginator/Paginator.module.css","components/common/paginator/Paginator.tsx","components/Users/User.tsx","components/Users/highlight/Highlight.js","components/Users/UsersSearchEngine.js","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalUsersCount","currentPage","pageSize","onPageChanged","pagesCount","portionSize","Math","ceil","pages","i","push","className","styles","paginator","pageNumber","Stack","spacing","Pagination","count","variant","shape","showFirstButton","showLastButton","defaultPage","onChange","event","value","User","user","followingInProgress","unfollow","follow","List","sx","width","maxWidth","bgcolor","ListItem","alignItems","ListItemAvatar","to","id","Avatar","alt","name","src","photos","small","userPhoto","ListItemText","primary","secondary","Fragment","Typography","display","component","color","status","followed","Button","disabled","some","onClick","Divider","Highlight","searchText","parts","split","RegExp","map","part","index","toLowerCase","s","UsersSearchEngine","useState","postsFromServer","setPostsFromServer","filteredPosts","setFilteredPosts","totalCount","setTotalCount","loading","setLoading","inputTextValue","setInputTextValue","setPageNumber","serverError","setServerError","delayLoadingFetchToFalse","override","css","filter","useCallback","filtered","item","includes","FetchMessagesFromServer","URL","axios","get","then","response","DataFromServer","data","items","concat","setTimeout","catch","error","toString","useEffect","increasedPageNumber","console","log","IncreasePageNumber","StartSearching","AllPages","length","Get100Slow","alert","urls","b","prevState","getAllPagesSlow","a","ContainerForSearchEngine","size","SearchBlockWithButton","Box","m","noValidate","autoComplete","TextField","label","target","height","mt","Alert","severity","Users","props","UsersBlock","users","u","UserSearchBlock","UsersContainer","getUsers","this","prevProps","isFetching","React","Component","compose","connect","state","getPageSize","getCurrentPage","getIsFetching","getFollowingInProgress","requestUsers"],"mappings":"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","file":"static/js/6.b9ee7bab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersBlock\":\"users_UsersBlock__n57CH\",\"usersPhoto\":\"users_usersPhoto__3NDxA\",\"startAndEnd\":\"users_startAndEnd__1ttIE\",\"userName\":\"users_userName__1cOMm\",\"userBlock\":\"users_userBlock__K67G0\",\"UserSearchBlock\":\"users_UserSearchBlock__9w3vM\",\"SearchBlockWithButton\":\"users_SearchBlockWithButton__1Z2qv\",\"Highlight\":\"users_Highlight__1bBZO\",\"ContainerForSearchEngine\":\"users_ContainerForSearchEngine__2Lh8t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1i1Wb\",\"pageNumber\":\"Paginator_pageNumber__trql5\",\"usersPhoto\":\"Paginator_usersPhoto__xeXVQ\",\"selectedPage\":\"Paginator_selectedPage__3m2UJ\",\"nonSelectedPage\":\"Paginator_nonSelectedPage__xaHAf\",\"totalPages\":\"Paginator_totalPages__1Z_dr\"};","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport {Pagination, Stack} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber:number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalUsersCount, currentPage,\r\n                                          pageSize, onPageChanged, portionSize = 10\r\n                                      }) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n\r\n        <div className={styles.pageNumber}>\r\n\r\n            <Stack spacing={2}>\r\n                <Pagination count={pagesCount}\r\n                            variant=\"outlined\" shape=\"rounded\"\r\n                            showFirstButton\r\n                            showLastButton\r\n                defaultPage={currentPage}\r\n                onChange={(event, value)=>{onPageChanged(value)}}\r\n\r\n                />\r\n\r\n            </Stack>\r\n\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersType} from \"../../types/Types\";\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number | null) => void\r\n    unfollow: (userId: number | null) => void\r\n    index: number\r\n}\r\n\r\nlet User: React.FC<UserPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <List sx={{width: '100%', maxWidth: 360, bgcolor: 'background.paper'}}>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <Avatar alt={user.name} src={user.photos!.small != null ? user.photos!.small : userPhoto}/>\r\n                        </NavLink>\r\n                    </ListItemAvatar>\r\n\r\n                    <ListItemText\r\n                        primary={user.name}\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    sx={{display: 'inline'}}\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    color=\"text.primary\"\r\n                                >\r\n                                    {user.status}\r\n                                </Typography>\r\n\r\n\r\n                            <div>\r\n                                    {user.followed\r\n                                        ? <Button variant=\"outlined\" color=\"error\"\r\n                                                  disabled={followingInProgress.some(id => id === user.id)}\r\n                                                  onClick={() => {\r\n                                                      unfollow(user.id);\r\n                                                  }}>\r\n                                            unfollow\r\n                                        </Button>\r\n\r\n                                        : <Button variant=\"outlined\" color=\"success\"\r\n                                                  disabled={followingInProgress.some(id => id === user.id)}\r\n                                                  onClick={() => {\r\n                                                      follow(user.id);\r\n                                                  }}>\r\n                                            Follow\r\n                                        </Button>\r\n\r\n                                    }\r\n                                </div>\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n\r\n                <Divider variant=\"inset\" component=\"li\"/>\r\n            </List>\r\n\r\n        </div>)\r\n\r\n}\r\nexport default User;","import s from '../users.module.css'\r\nexport const Highlight = ({name, searchText}) => {\r\n\r\n    const parts = name.split(new RegExp(`(${searchText})`, 'gi'));\r\n\r\n    return (\r\n        <>\r\n            {parts.map((part, index) =>\r\n                part.toLowerCase() === searchText.toLowerCase() ?\r\n                    <b key={index} className={s.Highlight}>{part}</b> : part)}\r\n\r\n\r\n        </>\r\n    )\r\n}","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport {Highlight} from \"./highlight/Highlight\";\r\nimport Preloader from \"../common/preloader/preloader\";\r\nimport {css} from \"@emotion/react\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport Alert from '@mui/material/Alert';\r\nimport s from './users.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Divider from \"@mui/material/Divider\";\r\n\r\n\r\nexport default function UsersSearchEngine({followingInProgress, follow, unfollow}) {\r\n\r\n    const [postsFromServer, setPostsFromServer] = useState([])\r\n    const [filteredPosts, setFilteredPosts] = useState([])\r\n    const [totalCount, setTotalCount] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    const [inputTextValue, setInputTextValue] = useState('')\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    const [serverError, setServerError] = useState('')\r\n\r\n\r\n    //================ preloader ======================\r\n    const delayLoadingFetchToFalse = () => {\r\n        setLoading(false)\r\n    }\r\n    const override = css`\r\n      display: block;\r\n      z-index: 1000;\r\n      position: fixed;\r\n      margin-top: 18px;\r\n      margin-left: 195px;\r\n      border-color: red;\r\n    `;\r\n\r\n\r\n    // =============== filtering  ==================\r\n    const filter = useCallback(() => {\r\n\r\n            const filtered =\r\n                postsFromServer.filter((item) => {\r\n                    return item.name.toLowerCase().includes(inputTextValue.toLowerCase())\r\n                })\r\n\r\n            setFilteredPosts(filtered)\r\n\r\n        }, [inputTextValue, postsFromServer]\r\n    )\r\n\r\n    // ================ server request=================\r\n    function FetchMessagesFromServer(URL) {\r\n\r\n        setLoading(true);\r\n        return axios\r\n            .get(URL)\r\n            .then(response => {\r\n                let DataFromServer = response.data.items\r\n                setTotalCount(response.data.totalCount)\r\n                return setPostsFromServer(postsFromServer => postsFromServer.concat(DataFromServer))\r\n            })\r\n            .then(response => {\r\n                setTimeout(delayLoadingFetchToFalse, 1000)\r\n                filter()\r\n            })\r\n            .catch(error =>\r\n                setServerError(error.toString())\r\n            )\r\n    }\r\n\r\n\r\n    useEffect(() => filter(), [postsFromServer, inputTextValue, pageNumber, filter])\r\n\r\n\r\n    // ================= buttons ========================\r\n    const IncreasePageNumber = () => {\r\n        let increasedPageNumber = pageNumber + 1\r\n        FetchMessagesFromServer(`https://social-network.samuraijs.com/api/1.0/users?count=10&page=${increasedPageNumber}`)\r\n            .catch(error => console.log(error))\r\n        setPageNumber(increasedPageNumber);\r\n    }\r\n    //=========initialization, starting with first page:\r\n    useEffect(() => {\r\n        IncreasePageNumber()\r\n    }, [])\r\n\r\n    const StartSearching = () => {\r\n        let AllPages = totalCount / 10\r\n\r\n        if (inputTextValue.length > 0 && filteredPosts.length < 1 && pageNumber < AllPages && loading === false) {\r\n            Get100Slow()\r\n            if (pageNumber >= AllPages) {\r\n                alert('Достигнут конец списка')\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (loading === true) {\r\n            setTimeout(StartSearching(), 1000)\r\n        }\r\n        if (loading === false) {\r\n            StartSearching()\r\n        }\r\n\r\n    }, [inputTextValue, filteredPosts])\r\n\r\n\r\n    //===========button Get 100 posts consistently\r\n    function Get100Slow() {\r\n        setServerError('')\r\n        let urls = []\r\n        let i = pageNumber\r\n        let b = pageNumber + 10\r\n        while (i < b) {\r\n            i++\r\n            urls.push(`https://social-network.samuraijs.com/api/1.0/users?count=10&page=${i}`)\r\n        }\r\n        setPageNumber(prevState => prevState + 10)\r\n\r\n        const getAllPagesSlow = async (urls) => {\r\n            urls.map(FetchMessagesFromServer)\r\n        }\r\n        getAllPagesSlow(urls)\r\n            .catch(error => console.log(error));\r\n\r\n    }\r\n\r\n//===========button Get 100 posts synchronously\r\n\r\n    const Get100Fast = () => {\r\n        let urlList = []\r\n        let i = pageNumber\r\n        let b = pageNumber + 10\r\n\r\n        while (i < b) {\r\n            i++\r\n            urlList.push(`https://social-network.samuraijs.com/api/1.0/users?count=10&page=${i}`)\r\n        }\r\n        setPageNumber(prevState => prevState + 10)\r\n\r\n        const getAllPagesFast = async (urlList) => {\r\n            return Promise.all(urlList.map(FetchMessagesFromServer))\r\n        }\r\n\r\n        getAllPagesFast(urlList)\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.ContainerForSearchEngine}>\r\n            {loading &&\r\n            <PacmanLoader color={\"#7D93C5\"} css={override} size={15}/>\r\n           }\r\n\r\n            <div className={s.SearchBlockWithButton}>\r\n                <div className=\"searchBlock\">\r\n               <span>\r\n\r\n                   <Box\r\n                       component=\"form\"\r\n                       sx={{\r\n\r\n                           '& > :not(style)': {m: 1, width: '25ch'},\r\n                       }}\r\n                       noValidate\r\n                       autoComplete=\"off\"\r\n                   >\r\n      <TextField id=\"searchField\" label=\"Найти пользователя\"\r\n          // sx={{color: \"darkolivegreen\"}}\r\n                 color=\"primary\"\r\n\r\n                 variant=\"outlined\"\r\n                 value={inputTextValue}\r\n                 key=\"searchField\"\r\n                 onChange={(event => {\r\n                     setInputTextValue(event.target.value)\r\n                     // filter(event.target.value)\r\n                 })}\r\n      />\r\n\r\n    </Box>\r\n\r\n            </span>\r\n\r\n\r\n                </div>\r\n                {inputTextValue.length > 0 && <Button sx={{\r\n                    height: \"40px\",\r\n                    mt: \"15px\"\r\n                }}\r\n                                                      onClick={Get100Slow} variant=\"contained\" size=\"small\">Следующие\r\n                    100 записей </Button>\r\n                }\r\n            </div>\r\n            <div>\r\n                {serverError &&\r\n                <Alert sx={{width: \"400px\"}} severity=\"error\">Сервер ограничивает выдачу по 10 пользователей за раз.\r\n                    Не стесняемся, жмем дальше. Сообщение сервера:\r\n                    {serverError}</Alert>}\r\n            </div>\r\n\r\n            {inputTextValue.length > 0 && <div>\r\n                <div>Отображено записей {filteredPosts.length} из {totalCount} </div>\r\n                <b> Страница на сервере № {pageNumber} </b>\r\n\r\n                <div>\r\n                    {filteredPosts.map((user, index) =>\r\n                        <List sx={{width: '100%', maxWidth: 360, bgcolor: 'background.paper'}}>\r\n                            <ListItem alignItems=\"flex-start\">\r\n                                <ListItemAvatar>\r\n                                    <NavLink to={'/profile/' + user.id}>\r\n                                        <Avatar alt={user.name}\r\n                                                src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n                                    </NavLink>\r\n                                </ListItemAvatar>\r\n\r\n                                <ListItemText\r\n                                    primary={\r\n                                        <Highlight name={user.name} searchText={inputTextValue}/>\r\n\r\n                                    }\r\n                                    secondary={\r\n                                        <React.Fragment>\r\n                                            <Typography\r\n                                                sx={{display: 'inline'}}\r\n                                                component=\"span\"\r\n                                                variant=\"body2\"\r\n                                                color=\"text.primary\"\r\n                                            >\r\n                                                {user.status}\r\n                                            </Typography>\r\n\r\n                                            {/*<div>*/}\r\n                                            {/*    {user.followed &&  <Button variant=\"outlined\" color=\"error\"*/}\r\n                                            {/*                  disabled={followingInProgress.some(id => id === user.id)}*/}\r\n                                            {/*                  onClick={() => {*/}\r\n                                            {/*                      unfollow(user.id);*/}\r\n                                            {/*                  }}>*/}\r\n                                            {/*            unfollow*/}\r\n                                            {/*        </Button>}*/}\r\n                                            {/*    {!user.followed &&  <Button variant=\"outlined\" color=\"success\"*/}\r\n                                            {/*                  disabled={followingInProgress.some(id => id === user.id)}*/}\r\n                                            {/*                  onClick={() => {*/}\r\n                                            {/*                      follow(user.id);*/}\r\n                                            {/*                  }}>*/}\r\n                                            {/*            Follow*/}\r\n                                            {/*        </Button>*/}\r\n\r\n                                            {/*    }*/}\r\n                                            {/*</div>*/}\r\n                                        </React.Fragment>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n\r\n                            <Divider variant=\"inset\" component=\"li\"/>\r\n                        </List>)\r\n\r\n                    }\r\n\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport Paginator from \"../common/paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersType} from \"../../types/Types\";\r\nimport s from './users.module.css'\r\nimport TextField from '@mui/material/TextField';\r\nimport UsersSearchEngine from './UsersSearchEngine'\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    onPageChanged: (pageNumber:number)=> void\r\n    unfollow: (userId:number | null)=> void\r\n    follow: (userId:number | null)=> void\r\n    index: number\r\n}\r\n\r\n\r\nlet Users: React.FC <PropsType> = ({currentPage, onPageChanged ,pageSize ,\r\n                                       totalUsersCount ,...props}) => {\r\n\r\n\r\n\r\n    return <div className={s.UsersBlock}>\r\n        <div>\r\n        <Paginator totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                   onPageChanged={onPageChanged} currentPage={currentPage}/>\r\n\r\n        {props.users.map((u) =>\r\n            <User\r\n                  key={u.id}\r\n                  user={u}\r\n                  followingInProgress={props.followingInProgress}\r\n                  unfollow={props.unfollow}\r\n                  follow={props.follow}\r\n            />\r\n        )\r\n        }\r\n        </div>\r\n        <div className={s.UserSearchBlock}>\r\n            <UsersSearchEngine  followingInProgress={props.followingInProgress}\r\n                                unfollow={props.unfollow}\r\n                                follow={props.follow}  />\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n// @ts-ignore\r\nexport default Users;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,  requestUsers,\r\n} from \"../../Redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize, getUsers,\r\n    totalUsersCount\r\n} from \"../../Redux/usersSelectors\";\r\nimport {UsersMapStateToPropsType, UsersMapDispatchToPropsType, UsersOwnPropsType} from \"../../types/Types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\n\r\ntype UsersPropsType = UsersMapStateToPropsType & UsersMapDispatchToPropsType & UsersOwnPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        let {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        // Популярный пример (не забудьте сравнить пропсы):\r\n        if (this.props.followingInProgress !== prevProps.followingInProgress) {\r\n            let {currentPage, pageSize} = this.props;\r\n            this.props.getUsers(currentPage, pageSize);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): UsersMapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalUsersCount: totalUsersCount(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    } as UsersMapStateToPropsType\r\n}\r\n\r\n\r\nexport default compose(\r\n    // <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<UsersMapStateToPropsType, UsersMapDispatchToPropsType, UsersOwnPropsType, AppStateType>(mapStateToProps,\r\n        {\r\n            follow, unfollow, getUsers: requestUsers\r\n        }),\r\n)(UsersContainer);\r\n"],"sourceRoot":""}