{"version":3,"sources":["components/common/paginator/Paginator.module.css","components/common/paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalUsersCount","currentPage","pageSize","onPageChanged","pagesCount","portionSize","Math","ceil","pages","i","push","className","styles","paginator","pageNumber","Stack","spacing","Pagination","count","variant","shape","showFirstButton","showLastButton","defaultPage","onChange","event","value","User","user","followingInProgress","unfollow","follow","List","sx","width","maxWidth","bgcolor","ListItem","alignItems","ListItemAvatar","to","id","Avatar","alt","name","src","photos","small","userPhoto","ListItemText","primary","secondary","Fragment","Typography","display","component","color","status","followed","disabled","some","onClick","Divider","Users","props","users","map","u","UsersContainer","getUsers","this","prevProps","isFetching","React","Component","compose","connect","state","getPageSize","getCurrentPage","getIsFetching","getFollowingInProgress","requestUsers"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,WAAa,8BAA8B,aAAe,gCAAgC,gBAAkB,mCAAmC,WAAa,gC,gKC2CnPC,EAhCsB,SAAC,GAMlC,IAHyC,IAFHC,EAEE,EAFFA,gBAAiBC,EAEf,EAFeA,YACjBC,EACE,EADFA,SAAUC,EACR,EADQA,cAE5CC,GADoC,EADuBC,YAE9CC,KAAKC,KAAKP,EAAkBE,IACzCM,EAAuB,GAClBC,EAAI,EAAGA,GAAKL,EAAYK,IAC7BD,EAAME,KAAKD,GAIf,OAAO,qBAAKE,UAAWC,IAAOC,UAAvB,SAEH,qBAAKF,UAAWC,IAAOE,WAAvB,SAEI,cAACC,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACI,cAACC,EAAA,EAAD,CAAYC,MAAOd,EACPe,QAAQ,WAAWC,MAAM,UACzBC,iBAAe,EACfC,gBAAc,EAC1BC,YAAatB,EACbuB,SAAU,SAACC,EAAOC,GAASvB,EAAcuB,a,gFCmC1CC,EA/CoB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,oBAAqBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAGtE,OACI,8BACS,eAACC,EAAA,EAAD,CAAMC,GAAI,CAAEC,MAAO,OAAQC,SAAU,IAAKC,QAAS,oBAAnD,UACX,eAACC,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,UACI,cAAC,IAAD,CAASC,GAAI,YAAcZ,EAAKa,GAAhC,SACF,cAACC,EAAA,EAAD,CAAQC,IAAKf,EAAKgB,KAAMC,IAA2B,MAAtBjB,EAAKkB,OAAQC,MAAgBnB,EAAKkB,OAAQC,MAAQC,UAGjF,cAACC,EAAA,EAAD,CACIC,QAAStB,EAAKgB,KACdO,UACI,eAAC,IAAMC,SAAP,WACI,cAACC,EAAA,EAAD,CACIpB,GAAI,CAAEqB,QAAS,UACfC,UAAU,OACVpC,QAAQ,QACRqC,MAAM,eAJV,SAMK5B,EAAK6B,SAEV,8BACC7B,EAAK8B,SACA,wBAAQC,SAAU9B,EAAoB+B,MAAK,SAAAnB,GAAE,OAAIA,IAAOb,EAAKa,MACrDoB,QAAS,WACL/B,EAASF,EAAKa,KAF1B,sBAKA,wBAAQkB,SAAU9B,EAAoB+B,MAAK,SAAAnB,GAAE,OAAIA,IAAOb,EAAKa,MACrDoB,QAAS,WACL9B,EAAOH,EAAKa,KAFxB,8BAUJ,cAACqB,EAAA,EAAD,CAAS3C,QAAQ,QAAQoC,UAAU,a,+DC3B1CQ,EAlBmB,SAAC,GAAuE,IAAtE9D,EAAqE,EAArEA,YAAaE,EAAwD,EAAxDA,cAAeD,EAAyC,EAAzCA,SAAUF,EAA+B,EAA/BA,gBAAoBgE,EAAW,iBACrG,OAAO,gCACH,cAAC,EAAD,CAAWhE,gBAAiBA,EAAiBE,SAAUA,EAC5CC,cAAeA,EAAeF,YAAaA,IAErD+D,EAAMC,MAAMC,KAAI,SAAAC,GAAC,OACd,cAAC,EAAD,CACMvC,KAAMuC,EACNtC,oBAAqBmC,EAAMnC,oBAC3BC,SAAUkC,EAAMlC,SAChBC,OAAQiC,EAAMjC,QAJToC,EAAE1B,W,yBCAnB2B,E,4MAMFjE,cAAgB,SAACW,GACb,IAAKZ,EAAY,EAAK8D,MAAjB9D,SACL,EAAK8D,MAAMK,SAASvD,EAAYZ,I,uDAPpC,WACI,MAA8BoE,KAAKN,MAA9B/D,EAAL,EAAKA,YAAaC,EAAlB,EAAkBA,SAClBoE,KAAKN,MAAMK,SAASpE,EAAaC,K,gCAOrC,SAAmBqE,GAEf,GAAID,KAAKN,MAAMnC,sBAAwB0C,EAAU1C,oBAAqB,CAClE,MAA8ByC,KAAKN,MAA9B/D,EAAL,EAAKA,YAAaC,EAAlB,EAAkBA,SAClBoE,KAAKN,MAAMK,SAASpE,EAAaC,M,oBAIzC,WACI,OAAO,qCAEFoE,KAAKN,MAAMQ,WAAa,cAAC,IAAD,IAAe,KACxC,cAAC,EAAD,CAAOxE,gBAAiBsE,KAAKN,MAAMhE,gBAC5BE,SAAUoE,KAAKN,MAAM9D,SACrBD,YAAaqE,KAAKN,MAAM/D,YACxBE,cAAemE,KAAKnE,cACpB8D,MAAOK,KAAKN,MAAMC,MAClBlC,OAAQuC,KAAKN,MAAMjC,OACnBD,SAAUwC,KAAKN,MAAMlC,SACrBD,oBAAqByC,KAAKN,MAAMnC,6B,GA7BtB4C,IAAMC,WAkDpBC,sBAEXC,aAdkB,SAACC,GACnB,MAAO,CACHZ,MAAOI,YAASQ,GAChB3E,SAAU4E,YAAYD,GACtB5E,YAAa8E,YAAeF,GAC5B7E,gBAAiBA,YAAgB6E,GACjCL,WAAYQ,YAAcH,GAC1BhD,oBAAqBoD,YAAuBJ,MAQ5C,CACI9C,WAAQD,aAAUuC,SAAUa,MAJzBP,CAMbP","file":"static/js/6.cbf876a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__hodeS\",\"pageNumber\":\"Paginator_pageNumber__svY4Z\",\"usersPhoto\":\"Paginator_usersPhoto__2XuPw\",\"selectedPage\":\"Paginator_selectedPage__1-GPy\",\"nonSelectedPage\":\"Paginator_nonSelectedPage__1c89Q\",\"totalPages\":\"Paginator_totalPages__1EhIu\"};","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport {Pagination, Stack} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber:number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalUsersCount, currentPage,\r\n                                          pageSize, onPageChanged, portionSize = 10\r\n                                      }) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n\r\n        <div className={styles.pageNumber}>\r\n\r\n            <Stack spacing={2}>\r\n                <Pagination count={pagesCount}\r\n                            variant=\"outlined\" shape=\"rounded\"\r\n                            showFirstButton\r\n                            showLastButton\r\n                defaultPage={currentPage}\r\n                onChange={(event, value)=>{onPageChanged(value)}}\r\n\r\n                />\r\n\r\n            </Stack>\r\n\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UsersType} from \"../../types/Types\";\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number | null) => void\r\n    unfollow: (userId: number | null) => void\r\n\r\n}\r\n\r\nlet User:React.FC<UserPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n                 <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\r\n      <ListItem alignItems=\"flex-start\">\r\n        <ListItemAvatar>\r\n            <NavLink to={'/profile/' + user.id}>\r\n          <Avatar alt={user.name} src={user.photos!.small != null ? user.photos!.small : userPhoto} />\r\n            </NavLink>\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n            primary={user.name}\r\n            secondary={\r\n                <React.Fragment>\r\n                    <Typography\r\n                        sx={{ display: 'inline' }}\r\n                        component=\"span\"\r\n                        variant=\"body2\"\r\n                        color=\"text.primary\"\r\n                    >\r\n                        {user.status}\r\n                    </Typography>\r\n                    <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unfollow(user.id);\r\n                                  }}>\r\n                            UnFollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id);\r\n                                  }}>\r\n                            Follow</button>}\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n        />\r\n          </ListItem>\r\n                      <Divider variant=\"inset\" component=\"li\" />\r\n          </List>\r\n\r\n        </div>)\r\n\r\n}\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersType} from \"../../types/Types\";\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    onPageChanged: (pageNumber:number)=> void\r\n    unfollow: (userId:number | null)=> void\r\n    follow: (userId:number | null)=> void\r\n}\r\n\r\n\r\nlet Users: React.FC <PropsType> = ({currentPage, onPageChanged ,pageSize ,totalUsersCount ,...props}) => {\r\n    return <div>\r\n        <Paginator totalUsersCount={totalUsersCount} pageSize={pageSize}\r\n                   onPageChanged={onPageChanged} currentPage={currentPage}/>\r\n\r\n        {props.users.map(u =>\r\n            <User key={u.id}\r\n                  user={u}\r\n                  followingInProgress={props.followingInProgress}\r\n                  unfollow={props.unfollow}\r\n                  follow={props.follow}\r\n            />\r\n        )\r\n        }\r\n    </div>\r\n}\r\n\r\n// @ts-ignore\r\nexport default Users;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,  requestUsers,\r\n} from \"../../Redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize, getUsers,\r\n    totalUsersCount\r\n} from \"../../Redux/usersSelectors\";\r\nimport {UsersMapStateToPropsType, UsersMapDispatchToPropsType, UsersOwnPropsType} from \"../../types/Types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\n\r\ntype UsersPropsType = UsersMapStateToPropsType & UsersMapDispatchToPropsType & UsersOwnPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        let {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        // Популярный пример (не забудьте сравнить пропсы):\r\n        if (this.props.followingInProgress !== prevProps.followingInProgress) {\r\n            let {currentPage, pageSize} = this.props;\r\n            this.props.getUsers(currentPage, pageSize);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): UsersMapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalUsersCount: totalUsersCount(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    } as UsersMapStateToPropsType\r\n}\r\n\r\n\r\nexport default compose(\r\n    // <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<UsersMapStateToPropsType, UsersMapDispatchToPropsType, UsersOwnPropsType, AppStateType>(mapStateToProps,\r\n        {\r\n            follow, unfollow, getUsers: requestUsers\r\n        }),\r\n)(UsersContainer);\r\n"],"sourceRoot":""}