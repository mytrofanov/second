{"version":3,"sources":["components/Profile/Posts/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/Posts/Posts.module.css","assets/images/mask.jpg","components/Profile/Posts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/Posts/ProfileInfo/ProfileForm.jsx","components/Profile/Posts/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.jsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","aboutStatus","onDoubleClick","isOwner","TextField","sx","width","label","id","defaultValue","size","value","autoFocus","onChange","ev","currentTarget","onBlur","updateStatus","ProfileForm","profile","onSubmit","callEditMode","ProfileDataForm","useForm","register","handleSubmit","profileError","formState","errors","error","ButtonTheme","createTheme","palette","primary","light","main","dark","contrastText","secondary","ProfileFormBlock","FormInputDiv","variant","fullName","placeholder","aboutMe","Checkbox","inputProps","defaultChecked","fullWidth","lookingForAJobDescription","Object","keys","contacts","map","key","divName","inputName","ContactInputForm","ButtonsOnProfileEditForm","theme","Stack","spacing","direction","Button","type","color","onClick","ProfileData","about","lookingForAJob","contactTitle","contactValue","Contact","contact","ProfileInfo","savePhoto","saveProfileForm","ava","photos","large","mask","ProfileBlockForTwoColums","ProfileBlockColumOne","container","alt","userPortraitOnProfile","src","overlay","bigPen","e","target","files","length","ProfileBlockColumTwo","data","Post","item","message","item__like","count","discount","Posts","React","memo","postsElements","posts","reverse","p","addPost","newPost","post","NewPostForm","PostAddForm","textFieldOnPosts","required","maxLength","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.abbc9422.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__OV1ho\",\"container\":\"ProfileInfo_container__2t6zv\",\"block\":\"ProfileInfo_block__MEoUZ\",\"userPortraitOnProfile\":\"ProfileInfo_userPortraitOnProfile__1ZAyG\",\"about\":\"ProfileInfo_about__2Gj0I\",\"ProfileBlockForTwoColums\":\"ProfileInfo_ProfileBlockForTwoColums__a2U7q\",\"ProfileBlockColumTwo\":\"ProfileInfo_ProfileBlockColumTwo__3Twf4\",\"ProfileData\":\"ProfileInfo_ProfileData__2Fdgb\",\"ProfileFormBlock\":\"ProfileInfo_ProfileFormBlock__1tH1G\",\"FormInputDiv\":\"ProfileInfo_FormInputDiv__FpMkN\",\"ContactInputForm\":\"ProfileInfo_ContactInputForm__LqPCw\",\"ButtonsOnProfileEditForm\":\"ProfileInfo_ButtonsOnProfileEditForm__4-A7t\",\"profileError\":\"ProfileInfo_profileError__3T1d1\",\"editProfile\":\"ProfileInfo_editProfile__Pt0La\",\"status\":\"ProfileInfo_status__1bo3m\",\"aboutStatus\":\"ProfileInfo_aboutStatus__3U1Oz\",\"contact\":\"ProfileInfo_contact__3wsNP\",\"overlay\":\"ProfileInfo_overlay__ddtK6\",\"bigPen\":\"ProfileInfo_bigPen__2Vf9s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__XFPjl\",\"item__like\":\"Post_item__like__2ReMB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Posts_block__3I8-n\",\"post\":\"Posts_post__1G4OS\",\"PostAddForm\":\"Posts_PostAddForm__3xtOP\",\"textFieldOnPosts\":\"Posts_textFieldOnPosts__3p2ha\",\"content\":\"Posts_content__FXYm5\",\"hookForm\":\"Posts_hookForm__1bwbw\"};","export default __webpack_public_path__ + \"static/media/mask.cef09c37.jpg\";","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype ProfileStatusWithHookPropsType = {\r\n    status: string | null\r\n    updateStatus: (status:string | null)=>void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<ProfileStatusWithHookPropsType> =\r\n    (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditModeForStatus = () => {\r\n        if (props.isOwner) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const deactivateEditModeForStatus = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (ev:any) => {\r\n        setStatus(ev.currentTarget.value)\r\n    }\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n            <div>\r\n                  <span className={s.aboutStatus}  onDoubleClick={activateEditModeForStatus} data-title=\"Double click for editing. Your account only\">Статус: &nbsp;\r\n                      {props.status||\"-------\"}  </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <TextField\r\n                    sx={{width:\"300px\"} }\r\n                    label=\"Status\"\r\n                    id=\"outlined-size-small\"\r\n                    defaultValue=\"Small\"\r\n                    size=\"small\"\r\n                    value={status!}\r\n                    autoFocus={true} onChange={onStatusChange}\r\n                    onBlur={deactivateEditModeForStatus}/>\r\n\r\n                 </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Button, Checkbox, createTheme, TextField} from \"@material-ui/core\";\r\nimport {Stack} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\n\r\n\r\nexport const ProfileForm = ({profile, onSubmit, callEditMode}) => {\r\n\r\n\r\n    return <div>\r\n        <ProfileDataForm profile={profile} onSubmit={onSubmit} callEditMode={callEditMode}/>\r\n    </div>\r\n}\r\n\r\nexport const ProfileDataForm = ({onSubmit, profile, callEditMode}) => {\r\n\r\n    const inputCreator = (divName, inputName, placeholder) => {\r\n        return <div className = {s.ContactInputForm}>\r\n            <TextField\r\n            fullWidth\r\n            label= {divName}\r\n            id={divName}\r\n            variant=\"outlined\"\r\n            defaultValue={placeholder}\r\n            size=\"small\"\r\n            {...register(inputName)}\r\n        />\r\n\r\n        </div>\r\n    }\r\n\r\n    const {\r\n        register, handleSubmit,\r\n        formState: {errors}\r\n    } = useForm();\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n    const profileError = profile.error;\r\n\r\n    const ButtonTheme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                light: '#68b36b',\r\n                main: '#43a047',\r\n                dark: '#2e7031',\r\n                contrastText: '#fff',\r\n            },\r\n            secondary: {\r\n                light: '#ffee33',\r\n                main: '#ffea00',\r\n                dark: '#b2a300',\r\n                contrastText: '#000',\r\n            },\r\n        },\r\n    });\r\n\r\n     return (\r\n        <div >\r\n            <form className={s.ProfileFormBlock} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div>\r\n                    <div className={s.FormInputDiv}> <TextField\r\n                        label=\"Имя\"\r\n                        id=\"outlined-size-small\"\r\n                        variant=\"outlined\"\r\n                        defaultValue={profile.fullName}\r\n                        size=\"small\"\r\n                        {...register(\"fullName\")} placeholder={profile.fullName}\r\n                    />\r\n                         </div>\r\n                    <div className={s.FormInputDiv}>\r\n                        <TextField\r\n                            label=\"Обо мне\"\r\n                            id=\"outlined-size-small\"\r\n                            defaultValue={profile.aboutMe}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            {...register(\"aboutMe\")} placeholder={profile.aboutMe}\r\n                        />\r\n                       </div>\r\n                    <div>Ищу работу:   <Checkbox {...label} defaultChecked {...register(\"lookingForAJob\")}/>\r\n\r\n                        {/*<input {...register(\"lookingForAJob\")} type=\"checkbox\"/>*/}\r\n\r\n                    </div>\r\n                    <div className={s.FormInputDiv}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"Мои навыки\"\r\n                            id=\"outlined-size-small\"\r\n                            defaultValue={profile.lookingForAJobDescription}\r\n                            size=\"small\"\r\n                            sx={{width:\"300px\"}}\r\n                            variant=\"outlined\"\r\n                            {...register(\"lookingForAJobDescription\")}\r\n                        />\r\n\r\n                     </div>\r\n                    <b >Контакты:</b>\r\n\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        return < div key={key}>\r\n                            {inputCreator(key, \"contacts.\" + key, profile.contacts[key])}\r\n                        < /div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <div className={s.ButtonsOnProfileEditForm}></div>\r\n                <ThemeProvider theme={ButtonTheme}>\r\n                <Stack spacing={2} direction=\"row\">\r\n                <Button variant=\"contained\" id=\"saveProfileFormButton\" type=\"submit\" color=\"primary\">Save</Button>\r\n                <Button variant=\"contained\"  onClick={callEditMode} color=\"secondary\">Вернуться без изменений</Button>\r\n                </Stack>\r\n                </ThemeProvider>\r\n                <div className={s.profileError}>\r\n                    {profileError && profileError}\r\n                </div>\r\n\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../../common/preloader/preloader\";\r\nimport mask from \"./../../../../assets/images/mask.jpg\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileForm} from \"./ProfileForm\";\r\nimport {ContactsType, ProfilePropsType, ProfileType} from \"../../../../types/Types\";\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType>= ({profile, status,\r\n                                                    updateStatus, isOwner, savePhoto,\r\n                                                    saveProfileForm, setEditMode, editMode}) => {\r\n\r\n    const callEditMode = (editMode:boolean) => {\r\n        setEditMode(editMode)\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const ava:string = !profile.photos!.large ? mask : profile.photos!.large;\r\n    //подставляю маску вместо аватарки если ее нет у юзера\r\n\r\n    const selectPhoto = (e:any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (data:any) => {\r\n        saveProfileForm(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.ProfileInfo}>\r\n                <div className={s.ProfileBlockForTwoColums}>\r\n                    <div className={s.ProfileBlockColumOne}>\r\n                <div className={s.container}>\r\n                    <img alt={\"ava\"} className={s.userPortraitOnProfile} src={ava}/>\r\n                    {isOwner && <div className={s.overlay}>🖋</div>}\r\n                    {isOwner && <input type={\"file\"} className={s.bigPen} onChange={selectPhoto}/>}\r\n\r\n                </div>\r\n                <div className={s.status}>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n                </div>\r\n                    </div>\r\n                    <div className={s.ProfileBlockColumTwo}>\r\n                {!editMode && <ProfileData profile={profile} isOwner={isOwner} setEditMode={() => {\r\n                    callEditMode(true)\r\n                }}/>}\r\n\r\n                {editMode && <ProfileForm profile={profile} onSubmit={onSubmit} callEditMode={() => {\r\n                        callEditMode(false)\r\n                    }}/>\r\n                }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    setEditMode: (editMode:boolean)=>void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, setEditMode}) => {\r\n\r\n    return <div className={s.ProfileData}>\r\n        <div className={s.about}>\r\n            Имя: {profile.fullName}\r\n        </div>\r\n        <div className={s.about}>\r\n            О мне: {profile.aboutMe}\r\n        </div>\r\n        <div className={s.about}>\r\n            Ищу работу: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n\r\n            <div className={s.about}>\r\n                Professional skills: {profile.lookingForAJobDescription}</div>\r\n        </div>\r\n        <div>\r\n            <b>Контакты:</b>\r\n            {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })\r\n            }\r\n        </div>\r\n        {isOwner && <Button  onClick={() => {setEditMode(true)}} size=\"small\"\r\n                             variant=\"contained\">Редактировать профиль </Button>}\r\n\r\n\r\n        <div className={s.profileError}>\r\n            {profile.error && profile.error}\r\n        </div>\r\n    </div>\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>{contactTitle}: {contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src='https://i.insider.com/5de2ca2b79d7577f925703f2?width=1124&format=jpeg'\r\n                alt={\"ava\"}/>\r\n                {props.message}\r\n            </div>\r\n            <div className={s.item__like}> {props.count} Like\r\n                <span>  {props.discount} Dislike</span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './Posts.module.css'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {PostsType} from \"../../../types/Types\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst Posts: React.FC<MapPropsType & DispatchPropsType> = React.memo(props => {\r\n\r\n    let postsElements =\r\n        [...props.posts].reverse().map(p => <Post message={p.message} count={p.count} discount={p.discount}/>)\r\n\r\n    let addNewPost = (value: any) => {\r\n        props.addPost(value.newPost);\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <div>\r\n                <NewPostForm onSubmit={addNewPost}/>\r\n            </div>\r\n\r\n            <div className={s.post}> New Posts</div>\r\n\r\n            {postsElements}\r\n\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Posts;\r\n\r\n\r\nexport const NewPostForm = (props: any) => {\r\n\r\n    const {\r\n        register, handleSubmit,\r\n        formState: {errors}\r\n    } = useForm();\r\n    const onSubmit = (data: any) => props.onSubmit(data);\r\n    return (\r\n        <form className={s.PostAddForm} onSubmit={handleSubmit(onSubmit)}>\r\n            <span className={s.textFieldOnPosts}>\r\n            <TextField\r\n                sx={{width: \"150\"}}\r\n                label=\"post\"\r\n                id=\"textFieldOnPosts\"\r\n                size=\"small\"\r\n                {...register(\"newPost\", {required: true, maxLength: 30}\r\n                )} placeholder=\"enter your post\"\r\n            />\r\n            </span>\r\n\r\n            <Button type=\"submit\" id=\"buttonOnPostAddField\" variant=\"contained\">Send Message</Button>\r\n            {errors?.newPost?.type === \"required\" && <span>This field is required</span>}\r\n            {errors?.newPost?.type === \"maxLength\" && (\r\n                <span>This field cannot exceed 30 characters</span>\r\n\r\n            )}\r\n\r\n        </form>\r\n    );\r\n};","import {addPostActionCreator} from \"../../../Redux/profile-reducer\";\r\nimport Posts, {DispatchPropsType, MapPropsType} from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n         }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addPost: (newPost:string) => {\r\n            dispatch(addPostActionCreator(newPost));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType,DispatchPropsType, {},AppStateType >\r\n(mapStateToProps, mapDispatchToProps)(Posts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./Posts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../types/Types\";\r\n\r\n\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner ={props.isOwner}\r\n                         savePhoto ={props.savePhoto}\r\n                         saveProfileForm={props.saveProfileForm}\r\n                         setEditMode={props.setEditMode}\r\n                         editMode={props.editMode}\r\n                        />\r\n            <MyPostsContainer  />\r\n\r\n        </div>)\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfileForm, setEditMode, updateStatus\r\n} from \"../../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/Types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype ProfileDispatchPropsType = {\r\n    getUserProfile:(userId:number | null)=>void\r\n    getStatus:(userId:number | null)=>void\r\n    updateStatus: (status:string | null)=>void\r\n    savePhoto: (file: File)=>void\r\n    saveProfileForm: (profile:ProfileType)=>Promise<any>\r\n    setEditMode: (editMode:boolean)=>void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & ProfileDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if ( this.props.match.params.userId !==  prevProps.match.params.userId)\r\n        {\r\n            this.refreshProfile();\r\n        }//если юзер меняется то обновляем компоненту profile\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Profile {...this.props} profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfileForm={this.props.saveProfileForm}\r\n                     setEditMode={this.props.setEditMode}\r\n                     editMode={this.props.editMode}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    editMode:state.profilePage.editMode\r\n})};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getStatus,\r\n        updateStatus, savePhoto, saveProfileForm, setEditMode\r\n    }),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}