{"version":3,"sources":["assets/images/user.png","Redux/usersSelectors.ts","components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","Redux/auth-reducer.ts","Redux/friendsSelectors.ts","Redux/sidebar-reducer.ts","components/Friends/Friend.tsx","components/Friends/Friends.tsx","components/Sidebar/Sidebar.jsx","hoc/withAuthRedirect.js","components/Friends/FriendsContainer.tsx","components/Navbar/Navbar.jsx","Redux/dialogs-reducer.ts","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/portrait.jpg","components/Header/HeaderLoginBlock.js","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/login.tsx","Redux/app-reducer.ts","Redux/redux-store.ts","App.js","index.js","API/api.ts","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Login/login.module.css","components/Friends/friends.module.css","components/Header/Header.module.css","assets/images/Spin-1s-200px.svg","components/common/preloader/preloader.js","utils/object-helpers.js","Redux/users-reducer.ts","components/common/preloader/Preloader.module.css","components/Sidebar/Sidebar.module.css","Redux/profile-reducer.ts"],"names":["getUsers","state","usersPage","users","getPageSize","pageSize","getCurrentPage","currentPage","totalUsersCount","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","module","exports","initialState","getFriends","sidebar","friends","getFriendsPageSize","friendsPageSize","getCurrentFriendsPage","currentFriendsPage","getTotalFriendsCount","totalFriendsCount","SET_FRIENDS","SET_CURRENT_FRIENDS_PAGE","SET_TOTAL_FRIENDS_COUNT","setFriends","newFriends","type","setCurrentFriendsPage","sidebarReducer","action","Friend","friend","id","name","className","s","status","FriendAvatar","to","photos","small","Avatar","alt","src","sx","width","height","userPhoto","Friends","friendsBlock","undefined","slice","map","u","totalFriends","Sidebar","onFriendsPageChanged","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","React","connect","FriendsContainer","followed","refreshFriends","prevProps","prevState","snapshot","compose","dispatch","a","toggleIsFetching","usersAPI","data","items","totalCount","Navbar","nav","item","activeClassName","activeLink","SEND_MESSAGE","dialogs","ava","messages","message","dialogsReducer","body","newMessageBody","DialogItem","path","dialog","active","avatar","Message","Dialogs","dialogsPage","dialogsElements","d","messagesElements","m","block","dialogsItem","onSubmit","values","console","log","sendMessage","AddMessageForm","useForm","register","handleSubmit","errors","formState","formMessage","TextField","fs","required","maxLength","label","variant","size","Button","messagesPage","sendMessageCreator","HeaderLoginBlock","login","logoutReducer","AvatarLoginBlock","portrait","onClick","color","NavlinkButton","Header","header","Box","flexGrow","AppBar","position","Toolbar","IconButton","edge","mr","Typography","component","loginBlock","SET_USER_DATA","SET_AUTH_ERROR","SET_CAPTCHA_URL","userId","email","authError","captureURL","setAuthUserData","payload","setAuthError","errorMessage","setCaptchaURL","getAuthUserData","authAPI","me","response","resultCode","ResultCodeType","success","getCaptureUrl","securityAPI","url","authReducer","HeaderContainer","logout","LoginForm","onChange","loginPage","Loginform","placeholder","password","checkboxAndButtonBlock","testAccount","loginReducer","rememberMe","captcha","length","ResultCodeTypeWithCaptcha","captchaRequired","error","SET_INITIALIZED","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","usersReducers","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","UsersContainer","lazy","ProfileContainer","App","initializeApp","document","title","Suspense","fallback","exact","render","DialogsContainer","AppContainer","withRouter","then","SamuraiJSApp","ReactDOM","getElementById","instance","axios","create","withCredentials","headers","baseURL","get","unFollow","delete","follow","post","getProfile","warn","profileAPI","getStatus","updateStatus","put","saveProfile","profile","catch","request","savePhoto","file","formData","FormData","append","res","Preloader","override","css","loaderBlock","loader","updateObjectInArray","itemId","objPropName","newObjProps","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","followSuccess","unfollowSuccess","setCurrentPage","toggleFollowingProgress","requestUsers","page","count","followUnfollowFlow","apiMethod","actionCreator","bind","unfollow","filter","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SET_PHOTO","SET_PROFILE_ERROR","SET_EDIT_MODE","posts","discount","editMode","addPostActionCreator","newPost","setStatus","savePhotoSuccess","saveProfileError","setEditMode","getUserProfile","saveProfileForm","getState","p"],"mappings":"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","file":"static/js/main.4283e99a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const totalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsBlock\":\"News_newsBlock__3aZvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockMusic\":\"Music_blockMusic__2vPMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__2Fn10\"};","import {authAPI, ResultCodeType, ResultCodeTypeWithCaptcha, securityAPI} from \"../API/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst SET_AUTH_ERROR = 'SET_AUTH_ERROR';\r\nconst SET_CAPTCHA_URL = 'SET_CAPTCHA_URL';\r\n\r\nlet initialState: { isAuth: boolean;\r\n    authError: string | false | null;\r\n    login: null | string;\r\n    userId: number | null;\r\n    email: string | null;\r\n    captureURL: string | null };\r\ninitialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    authError: null,\r\n    captureURL: null\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: AuthActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n        case SET_AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                authError: action.errorMessage\r\n            }\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n    }\r\n}\r\ntype SetAuthUserDataActionPayloadType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\ntype  setAuthErrorType = {\r\n    type: typeof SET_AUTH_ERROR,\r\n    errorMessage: string | null | false\r\n}\r\ntype setCaptchaURLType = {\r\n    type: typeof SET_CAPTCHA_URL,\r\n    payload: { captureURL: string }\r\n}\r\ntype AuthActionType = SetAuthUserDataActionType | setAuthErrorType | setCaptchaURLType\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null,\r\n                                login: string | null, isAuth: boolean): SetAuthUserDataActionType =>\r\n    ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\r\n\r\nexport const setAuthError = (errorMessage: string | null | false): setAuthErrorType =>\r\n    ({type: SET_AUTH_ERROR, errorMessage})\r\n\r\nexport const setCaptchaURL = (captureURL: string): setCaptchaURLType =>\r\n    ({type: SET_CAPTCHA_URL, payload: {captureURL}})\r\n\r\nexport const getAuthUserData = () => async (dispatch: DispatchType) => {\r\n    let response = await authAPI.me();\r\n    if (response.resultCode === ResultCodeType.success) {\r\n        let {id, login, email} = response.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\ntype DispatchType = Dispatch<AuthActionType>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, any, AuthActionType>\r\n\r\nexport const loginReducer = (email: string, password: string,\r\n                             rememberMe: boolean, captcha: string): ThunkActionType =>\r\n    async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe, captcha);\r\n        const errorMessage = response.messages.length > 0 && response.messages[0];\r\n\r\n        if (response.resultCode === ResultCodeType.success) {\r\n            dispatch(getAuthUserData())\r\n            dispatch(setAuthError(''))\r\n            dispatch(setCaptchaURL(''));\r\n        }\r\n        if (response.resultCode === ResultCodeTypeWithCaptcha.captchaRequired) {\r\n            dispatch(getCaptureUrl())\r\n            dispatch(setAuthError(errorMessage))\r\n        } else {\r\n            dispatch(setAuthError(errorMessage))\r\n        }\r\n    }\r\n\r\nexport const logoutReducer = () => async (dispatch:DispatchType) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.resultCode === ResultCodeType.success) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptureUrl = () => async (dispatch: DispatchType) => {\r\n    const response = await securityAPI.getCaptureUrl();\r\n    const captureURL = response.data.url;\r\n    dispatch(setCaptchaURL(captureURL));\r\n\r\n\r\n}\r\n\r\nexport default authReducer;\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getFriends = (state:AppStateType) => {\r\n    return state.sidebar.friends;\r\n}\r\nexport const getFriendsPageSize = (state:AppStateType) => {\r\n    return state.sidebar.friendsPageSize;\r\n}\r\nexport const getCurrentFriendsPage = (state:AppStateType) => {\r\n    return state.sidebar.currentFriendsPage;\r\n}\r\n\r\nexport const getTotalFriendsCount = (state:AppStateType) => {\r\n    return state.sidebar.totalFriendsCount;\r\n}\r\n\r\n","import {usersAPI} from \"../API/api\";\r\nimport {toggleIsFetching, toggleIsFetchingType} from \"./users-reducer\";\r\nimport {FriendsType} from \"../types/Types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst SET_FRIENDS = 'SET_FRIENDS';\r\nconst SET_CURRENT_FRIENDS_PAGE = 'SET_CURRENT_FRIENDS_PAGE';\r\nconst SET_TOTAL_FRIENDS_COUNT = 'SET_TOTAL_FRIENDS_COUNT';\r\n\r\n\r\n\r\nlet initialState = {\r\n    friends: [] as Array<FriendsType>,\r\n    friendsPageSize: 12,\r\n    totalFriendsCount: 0,\r\n    currentFriendsPage: 1\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: SideBarActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_FRIENDS: {\r\n            return {...state, friends: action.newFriends} as InitialStateType\r\n        }\r\n        case SET_CURRENT_FRIENDS_PAGE: {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage}\r\n        }\r\n        case SET_TOTAL_FRIENDS_COUNT: {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SideBarActionType = SetFriendsType | SetCurrentFriendsPageType |\r\n    SetTotalFriendsCountType | toggleIsFetchingType\r\n\r\n//toggleIsFetchingType импортируем из userReducer\r\n\r\ntype SetFriendsType = {\r\n    type: typeof SET_FRIENDS\r\n    newFriends: Array<FriendsType>\r\n}\r\nexport const setFriends = (newFriends: Array<FriendsType>): SetFriendsType =>\r\n    ({type: SET_FRIENDS, newFriends})\r\n\r\ntype SetCurrentFriendsPageType = {\r\n    type: typeof SET_CURRENT_FRIENDS_PAGE\r\n    currentFriendsPage: number\r\n}\r\nexport const setCurrentFriendsPage = (currentFriendsPage: number): SetCurrentFriendsPageType =>\r\n    ({type: SET_CURRENT_FRIENDS_PAGE, currentFriendsPage})\r\n\r\n\r\ntype SetTotalFriendsCountType = {\r\n    type: typeof SET_TOTAL_FRIENDS_COUNT\r\n    totalFriendsCount: number\r\n}\r\nexport const setTotalFriendsCount = (totalFriendsCount: number): SetTotalFriendsCountType => ({\r\n    type: SET_TOTAL_FRIENDS_COUNT,\r\n    totalFriendsCount\r\n})\r\n\r\n\r\ntype ThunkActionType  = ThunkAction<Promise<void>, AppStateType, any , SideBarActionType>;\r\n\r\nexport const requestFriends = (currentFriendsPage: number,\r\n                               friendsPageSize: number, followed: boolean):ThunkActionType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentFriendsPage(currentFriendsPage))\r\n\r\n        let data = await usersAPI.getFriends(currentFriendsPage, friendsPageSize, followed);\r\n        let newFriends = data.data.items;\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setFriends(newFriends));\r\n        dispatch(setTotalFriendsCount(data.data.totalCount));\r\n        dispatch(setCurrentFriendsPage(currentFriendsPage));\r\n    }\r\n}\r\n\r\nexport default sidebarReducer;","import React from \"react\";\r\nimport s from \"./friends.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FriendsType} from \"../../types/Types\";\r\nimport {Avatar} from \"@mui/material\";\r\n\r\ntype FriendPropsType = {\r\n    friend: FriendsType\r\n}\r\n\r\nlet Friend: React.FC<FriendPropsType> = ({friend}) => {\r\n\r\n        return (\r\n            <div id={friend.name}>\r\n                <div className={s.friend} id={friend.name + friend.status}>\r\n                    <NavLink className={s.FriendAvatar} to={'/profile/' + friend.id}>\r\n                        {friend.photos!.small !=null && <Avatar\r\n                            alt={friend.name}\r\n                            src={friend.photos!.small!}\r\n                            sx={{ width: 90, height: 90 }}\r\n                        />}\r\n                        {friend.photos!.small ===null && <Avatar\r\n                            alt={friend.name}\r\n                            src={userPhoto}\r\n                            sx={{ width: 90, height: 90 }}\r\n                        />}\r\n                    </NavLink>\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>)\r\n\r\n}\r\n\r\n\r\nexport default Friend;","import React from \"react\";\r\nimport Friend from \"./Friend\";\r\nimport s from \"./friends.module.css\"\r\nimport {FriendsType} from \"../../types/Types\";\r\n\r\ntype FriendsPropsType = {\r\n    totalFriendsCount: number\r\n    friends: Array<FriendsType>\r\n\r\n}\r\n\r\nlet Friends: React.FC<FriendsPropsType> = ({totalFriendsCount, friends}) => {\r\n\r\n\r\n\r\n    return <div className={s.friendsBlock} >\r\n\r\n        {friends===undefined? \"Ошибка сервера\" :\r\n            friends.slice(0, 12).map(u =>\r\n            <Friend friend={u}   />\r\n        )\r\n        }\r\n        <div className={s.friends} >\r\n            <div className={s.totalFriends}>Всего друзей: </div>\r\n            <div>{totalFriendsCount}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './Sidebar.module.css'\r\nimport Friends from \"../Friends/Friends\";\r\n\r\n\r\nlet Sidebar = ({totalFriendsCount,friendsPageSize, currentFriendsPage, onFriendsPageChanged, friends}) => {\r\n\r\n    return (\r\n        <div className={s.Sidebar}>\r\n            <div className={s.friends}> Мои друзья:</div>\r\n\r\n            <Friends totalFriendsCount={totalFriendsCount} friendsPageSize={friendsPageSize}\r\n                              currentFriendsPage={currentFriendsPage} onFriendsPageChanged={onFriendsPageChanged}\r\n                              friends={friends}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n        let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\r\n    return connectedAuthRedirectComponent;\r\n}\r\n","import React from \"react\";\r\nimport Preloader from \"../common/preloader/preloader\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getFriends, getFriendsPageSize,\r\n    getTotalFriendsCount\r\n} from \"../../Redux/friendsSelectors\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {requestFriends} from \"../../Redux/sidebar-reducer\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {FriendsType} from \"../../types/Types\";\r\nimport {getFollowingInProgress} from \"../../Redux/usersSelectors\";\r\n\r\ntype FriendsContainerType = {\r\n    currentFriendsPage: number\r\n    friendsPageSize: number\r\n    getFriends: (currentPage: number, pageSize: number, followed: boolean) => void\r\n    isFetching: boolean\r\n    friends: Array<FriendsType>\r\n    totalFriendsCount: number\r\n    followed: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nclass FriendsContainer extends React.Component<FriendsContainerType> {\r\n\r\n    refreshFriends() {\r\n        let {currentFriendsPage, friendsPageSize, followed} = this.props;\r\n        this.props.getFriends(currentFriendsPage, friendsPageSize, followed);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshFriends()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<FriendsContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.followingInProgress !== this.props.followingInProgress) {\r\n            this.refreshFriends()\r\n        } //Обновляем друзей, если была попытка подписки-отписки\r\n\r\n    }\r\n\r\n    onFriendsPageChanged = (currentFriendsPage: number) => {\r\n        let {friendsPageSize, followed} = this.props;\r\n        this.props.getFriends(currentFriendsPage, friendsPageSize, followed);\r\n    }\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Sidebar\r\n                totalFriendsCount={this.props.totalFriendsCount}\r\n                friendsPageSize={this.props.friendsPageSize}\r\n                currentFriendsPage={this.props.currentFriendsPage}\r\n                onFriendsPageChanged={this.onFriendsPageChanged}\r\n                friends={this.props.friends}\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: getFriends(state),\r\n        totalFriendsCount: getTotalFriendsCount(state),\r\n        friendsPageSize: getFriendsPageSize(state),\r\n        currentFriendsPage: getCurrentFriendsPage(state),\r\n        followingInProgress:getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getFriends: requestFriends\r\n    }), withAuthRedirect\r\n)(FriendsContainer);","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsContainer from \"../Friends/FriendsContainer\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/News\" activeClassName={s.activeLink}>News</NavLink>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/Music\" activeClassName={s.activeLink}>Music</NavLink>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to=\"/Settings\" activeClassName={s.activeLink}>Settings</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/login\" activeClassName={s.activeLink}>Login</NavLink>\r\n            </div>\r\n            <FriendsContainer/>\r\n        </nav>)\r\n}\r\n\r\nexport default Navbar;","const SEND_MESSAGE = 'SEND_MESSAGE';\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Sasha', ava: 'https://klike.net/uploads/posts/2019-03/1551511784_4.jpg'},\r\n        {id: 2, name: 'Kolya', ava: 'https://klike.net/uploads/posts/2019-03/1551511801_1.jpg'},\r\n        {id: 3, name: 'Petya', ava: 'https://www.meme-arsenal.com/memes/cbfd4797382778baf1f41b8439399262.jpg'},\r\n        {\r\n            id: 4,\r\n            name: 'Vasya',\r\n            ava: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTnIZ65bUZfqwc204EF5GN3tpbfY5zQ2WiB1A&usqp=CAU'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Nino',\r\n            ava: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbMxEyi1yeivrdaCitJxEftqshPFPEouuz2A&usqp=CAU'\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Dina',\r\n            ava: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSa8SCQKFAMJ8BW_2FXCdUyTXm66A4eksY2iA&usqp=CAU'\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Pablo',\r\n            ava: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQYNPFMEDOAjlZxz1E1bSrNI-PlOq2m1tRh0g&usqp=CAU'\r\n        }\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'How are you doing?'},\r\n        {id: 3, message: 'Whats up?'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'},\r\n    ] as Array<MessagesType>\r\n\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst dialogsReducer = (state = initialState,\r\n                        action: SendMessageCreatorActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\ntype SendMessageCreatorActionType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): SendMessageCreatorActionType =>\r\n    ({type: SEND_MESSAGE, newMessageBody})\r\n\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    avatar?: string\r\n    ava?:string\r\n    name: string\r\n}\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype  MessagesPropsType = {\r\n    messages: Array<MessagesType>\r\n}\r\n\r\ntype DialogsType = {\r\n    dialogs: Array<DialogItemPropsType>\r\n}\r\n\r\ntype DialogsPageType = {\r\n    dialogsPage: DialogsType & MessagesPropsType\r\n}\r\n\r\ntype SendMessageType = {\r\n    sendMessage: (values:string) => any\r\n}\r\n\r\ntype DialogsPropsType = DialogsPageType & DialogsType & MessagesPropsType & SendMessageType\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img alt={\"Avatar\"} className={s.ava} src={props.avatar}/>\"\r\n            <NavLink to={path}> {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} avatar={d.ava}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values:any) => {\r\n        console.log(values.newMessageBody)\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.block}>\r\n\r\n            </div>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            {/*закрываются диалоги - АВАТАРКИ С ИМЕНАМИ*/}\r\n\r\n\r\n            <div className={s.messages}>  {/*начало ТЕКСТА сообщений*/}\r\n                <div>{messagesElements} </div>\r\n                <div> {/*НАЧАЛО ПОЛЯ ВВОДА НОВОГО СООБЩЕНИЯ*/}\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n                {/*КОНЕЦ ПОЛЯ ВВОДА НОВОГО СООБЩЕНИЯ*/}\r\n            </div>\r\n            {/*конец блока сообщений*/}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\nexport const AddMessageForm = (props:any) => {\r\n    const {register, handleSubmit, formState: {errors}} = useForm();\r\n    // @ts-ignore\r\n    const onSubmit = data => props.onSubmit(data);\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={s.formMessage}>\r\n            <TextField sx={{\r\n                fs: \"10px\",\r\n                width: \"250px\"\r\n            }}            {...register(\"newMessageBody\", {required: true, maxLength: 30})}\r\n                       id=\"outlined-basic\" label=\"enter your message\" variant=\"outlined\" size=\"small\"/>\r\n\r\n            <Button type=\"submit\" variant=\"contained\">Send Message</Button>\r\n            </div>\r\n            {errors?.newMessageBody?.type === \"required\" && <span>This field is required</span>}\r\n            {errors?.newMessageBody?.type === \"maxLength\" && (\r\n                <span>This field cannot exceed 30 characters</span>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n","import {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dialogsPage: state.messagesPage,\r\n\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport  default compose (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);","export default __webpack_public_path__ + \"static/media/portrait.753be09c.jpg\";","import Button from \"@mui/material/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport portrait from '../../assets/images/portrait.jpg'\r\nimport s from './Header.module.css'\r\n\r\nexport const HeaderLoginBlock = ({isAuth, login, logoutReducer}) => {\r\n\r\n\r\n    return (\r\n        <div className={s.AvatarLoginBlock}>\r\n            <div className={s.avatar}>\r\n                {isAuth && <Avatar alt={login} src={portrait}/>}\r\n            </div>\r\n            <div>\r\n                {isAuth && <Button variant=\"outlined\" onClick={logoutReducer} color=\"inherit\">Log out</Button>}\r\n            </div>\r\n            {!isAuth && <NavLink className={s.NavlinkButton}\r\n                to={'/login'}><Button variant=\"outlined\"  sx={{color:'white'}}\r\n\r\n                                      color=\"inherit\">Log in</Button></NavLink>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport logo from \"../../assets/images/Screenshot_1.jpg\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {HeaderLoginBlock} from \"./HeaderLoginBlock\";\r\n\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logoutReducer: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n\r\n\r\n        <header className={s.header}>\r\n\r\n\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Social Network\r\n                        </Typography>\r\n                        <HeaderLoginBlock isAuth={props.isAuth} login={props.login}\r\n                                          logoutReducer={props.logoutReducer} />\r\n\r\n\r\n                    </Toolbar>\r\n\r\n                </AppBar>\r\n            </Box>\r\n\r\n            <div className={s.loginBlock}>\r\n\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutReducer} from \"../../Redux/auth-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logoutReducer: ()=>void\r\n}\r\ntype HeaderContainerTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerTypeProps> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n(mapStateToProps, {logoutReducer})(HeaderContainer);","import React from 'react';\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport s from './login.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport {loginReducer} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\ntype LoginFormPropsType = {\r\n    onSubmit: SubmitHandler<FormValues>\r\n    captureURL: string\r\n\r\n}\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    loginReducer: (email: string, password: string, rememberMe: string, captcha: string) => void\r\n    authError: string | null\r\n    captureURL: string\r\n}\r\n\r\ntype FormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: string\r\n    captcha: string\r\n};\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captureURL: string | null\r\n    authError: any\r\n}\r\ntype AllFormPropsType = FormValues & LoginPropsType & LoginFormPropsType\r\n\r\nexport const LoginForm: React.FC<LoginFormPropsType> = ({onSubmit, captureURL}) => {\r\n\r\n    const {\r\n        register, handleSubmit,\r\n        formState: {errors}\r\n    } = useForm();\r\n    const {onChange, ...rest} = register(\"loginError\");\r\n    // @ts-ignore\r\n    // @ts-ignore\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <form className={s.Loginform} onSubmit={handleSubmit(onSubmit)}>\r\n                <h1>Login Form</h1>\r\n                <div className={s.email}>\r\n                    <TextField sx={{\r\n                        fs: \"10px\",\r\n                        width: \"300px\"\r\n                    }}\r\n                               {...register(\"email\", {\r\n                                   required: true,\r\n                                   maxLength: 40\r\n                               })} placeholder={\" e-mail\"}\r\n                               id=\"outlined-basic\" label=\"e-mail\" variant=\"outlined\" size=\"small\"/>\r\n\r\n                    {errors?.email?.type === \"required\" && <span>This field is required</span>}\r\n                    {errors?.email?.type === \"maxLength\" && (\r\n                        <span>This field cannot exceed 40 characters</span>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    <TextField sx={{\r\n                        fs: \"10px\",\r\n                        width: \"300px\"\r\n                    }}\r\n                               {...register(\"password\", {required: true, maxLength: 30}\r\n                               )} placeholder={\" password\"} type={\"password\"}\r\n                               id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" size=\"small\"/>\r\n                    {errors?.password?.type === \"required\" && <span>This field is required</span>}\r\n                    {errors?.password?.type === \"maxLength\" && (\r\n                        <span>This field cannot exceed 30 characters</span>\r\n                    )}\r\n                </div>\r\n                <div> {captureURL && <img alt={\"Угадай надпись\"} src={captureURL}/>}\r\n                    {captureURL &&\r\n                    <div><input {...register(\"captcha\")}\r\n                                placeholder={\"введите символы сюда\"}\r\n                                type={\"text\"}/></div>}\r\n                </div>\r\n                <div className={s.checkboxAndButtonBlock}>\r\n                    <div>\r\n                        <input {...register(\"rememberMe\")} type=\"checkbox\"/>\r\n                        Remember me\r\n                    </div>\r\n\r\n                    {/*<input type=\"submit\" value=\"Login\"/>*/}\r\n                    <Button type=\"submit\" id=\"LoginFormButton\" variant=\"contained\">Login</Button>\r\n                </div>\r\n            </form>\r\n\r\n\r\n            <div className={s.testAccount}>\r\n                <h1> Test account: </h1>\r\n                <div>Email: free@samuraijs.com</div>\r\n                <div>Password: free</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst login: any = ({isAuth, loginReducer, authError, captureURL}) => {\r\n\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = data =>\r\n        loginReducer(data.email, data.password, data.rememberMe, data.captcha);\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div className={s.loginBlock}>\r\n        <LoginForm onSubmit={onSubmit} captureURL={captureURL}/>\r\n        <div className={s.error}>\r\n            {authError}\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    authError: state.auth.authError,\r\n    captureURL: state.auth.captureURL\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    loginReducer: (email: string, password: string,\r\n                   rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\n//<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, AllFormPropsType, AppStateType>\r\n(mapStateToProps, {loginReducer})(login);\r\n","import {getAuthUserData} from \"./auth-reducer\"\r\nconst SET_INITIALIZED = 'SET_INITIALIZED';\r\n\r\n\r\nexport type  initialStateType = {\r\n    initialized: boolean,\r\n};\r\n\r\nlet initialState: initialStateType = {\r\n    initialized: false,\r\n};\r\n\r\n\r\nconst appReducer = (state = initialState, action: initializedSuccessType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\ntype initializedSuccessType = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\n\r\nexport const initializedSuccess = (): initializedSuccessType =>\r\n    ({type: SET_INITIALIZED})\r\n\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any ) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess())\r\n    });\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducers from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducers,\r\n    auth: authReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType> // Типизация исходя из того, что уже есть в state\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer,  composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\nexport default store;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n// import UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redux/app-reducer\";\r\nimport Preloader from \"./components/common/preloader/preloader\";\r\nimport store from \"./Redux/redux-store\";\r\nimport FriendsContainer from \"./components/Friends/FriendsContainer\";\r\n\r\n\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        document.title = `Mytrofanov React App  ✅`;\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className='app-wrapper'>\r\n\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <React.Suspense fallback={<Preloader/>}>\r\n                    <div className='app-wrapper-content'>\r\n                        <Switch>\r\n                            <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\r\n                            <Route path='/dialogs'\r\n                                   render={() => <DialogsContainer/>}/>\r\n                            <Route path='/profile/:userId?'\r\n                                   render={() => <ProfileContainer/>}/>\r\n                            {/*<Route path='/news' render={() => <News/>}/>*/}\r\n                            {/*<Route path='/music' render={() => <Music/>}/>*/}\r\n                            {/*<Route path='/settings' render={() => <Settings/>}/>*/}\r\n                            <Route path='/users' render={() => <UsersContainer />}/>\r\n                            <Route path='/friends' render={() => <FriendsContainer/>}/>\r\n                            <Route path='/login' render={() => <Login/>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </React.Suspense>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nlet SamuraiJSApp = (props) => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\nexport default SamuraiJSApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n\r\n    ReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {PhotosType, ProfileType, UsersType} from \"../types/Types\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"7d870823-54dd-449f-8b28-49f59a10c313\"},\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`\r\n})\r\n//Типизация usersAPI начало\r\ntype UsersAPIType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n//Типизация usersAPI конец\r\n\r\n//Начало типизации для follow/unFollow\r\ntype FollowUnFollowApiType = {\r\n    resultCode: ResultCodeType\r\n    messages: string\r\n    data: {}\r\n}\r\n// Конец типизации для follow/unFollow\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<UsersAPIType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n\r\n    getFriends(currentFriendsPage = 1, friendsPageSize = 10, followed = true) {\r\n        return instance.get<UsersAPIType>(`users?page=${currentFriendsPage}&count=${friendsPageSize}&friend=${followed}`)\r\n    },\r\n\r\n// в delete параметр withCredentials отправляется вторым\r\n    unFollow(id: number) {\r\n        return instance.delete<FollowUnFollowApiType>(`follow/${id}`)\r\n    },\r\n\r\n// в post параметр withCredentials отправляется третьим\r\n    follow(id: number) {\r\n        return instance.post<FollowUnFollowApiType>(`follow/${id}`)\r\n    },\r\n\r\n    getProfile(userId: number | null) {\r\n        console.warn('Obsolete method.Please use profileApi')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n\r\n}\r\n\r\n//Начало типизации для всех типов ответов\r\n\r\ntype ApiResponseType = {\r\n    resultCode: ResultCodeType\r\n    messages: Array<string>\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n\r\n}\r\n//Конец типизации\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null ) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n    },\r\n\r\n    getStatus(userId: number | null) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ApiResponseType>('profile/status', {status: status})\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ApiResponseType>(`profile`, profile)\r\n            .catch(function (error) {\r\n                if (error.response) {\r\n                    // Request made and server responded\r\n                    console.log(\"data:\", error.response.data);\r\n                    console.log(\"status:\", error.response.status);\r\n                    console.log(\"headers:\", error.response.headers);\r\n                    return error.response\r\n                } else if (error.request) {\r\n                    // The request was made but no response was received\r\n                    console.log(\"request:\", error.request);\r\n                } else {\r\n                    // Something happened in setting up the request that triggered an Error\r\n                    console.log(\"Error-message:\", error.message);\r\n                }\r\n\r\n            });\r\n\r\n    },\r\n    savePhoto(file: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", file);\r\n\r\n        return instance.put<ApiResponseType>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n                //файл отправляем тремя параметрами\r\n            }\r\n        });\r\n    }\r\n}\r\n//Начало кодов сервера\r\nexport enum ResultCodeType {\r\n    success,\r\n    error = 1\r\n}\r\n\r\nexport enum ResultCodeTypeWithCaptcha {\r\n    captchaRequired = 10\r\n}\r\n//Конец кодов сервера\r\n\r\n// Начало типизации authAPI\r\nexport type ResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype AuthApiMeType = {\r\n    data: ResponseDataType\r\n    resultCode: ResultCodeType\r\n    messages: Array<string>\r\n}\r\n\r\ntype AuthApiLoginType = {\r\n    resultCode: ResultCodeType | ResultCodeTypeWithCaptcha\r\n    messages: Array<string>\r\n    data: { userId: number | null }\r\n}\r\ntype AuthApiDeleteType = {\r\n    resultCode: ResultCodeType\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\n// Конец типизации authAPI\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<AuthApiMeType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string) {\r\n        return instance.post<AuthApiLoginType>('auth/login',\r\n            {email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<AuthApiDeleteType>('auth/login').then(res=>res.data)\r\n    }\r\n}\r\n\r\ntype SecurityAPIType = {\r\n    url:string\r\n}\r\nexport const securityAPI = {\r\n    getCaptureUrl() {\r\n        return instance.get<SecurityAPIType>(`security/get-captcha-url`);\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__66EVQ\",\"item\":\"Navbar_item__37n3Q\",\"activeLink\":\"Navbar_activeLink__19IKA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__14MYQ\",\"dialogsItem\":\"Dialogs_dialogsItem__1mQKY\",\"active\":\"Dialogs_active__38tRc\",\"dialog\":\"Dialogs_dialog__1Au9-\",\"messages\":\"Dialogs_messages__2vSQb\",\"formMessage\":\"Dialogs_formMessage__3GAVe\",\"ava\":\"Dialogs_ava__W763u\",\"block\":\"Dialogs_block__2m4dm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"login_loginPage__wvhLO\",\"loginBlock\":\"login_loginBlock__KLLas\",\"loginForm\":\"login_loginForm__2XgpD\",\"Loginform\":\"login_Loginform__1Ysw_\",\"email\":\"login_email__OQqvV\",\"error\":\"login_error__1lnX6\",\"testAccount\":\"login_testAccount__lJweH\",\"checkboxAndButtonBlock\":\"login_checkboxAndButtonBlock__2Qlla\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsBlock\":\"friends_friendsBlock__3pt-g\",\"friend\":\"friends_friend__oKp00\",\"friends\":\"friends_friends__2FiYT\",\"usersPhoto\":\"friends_usersPhoto__hMd8H\",\"startAndEnd\":\"friends_startAndEnd__2H5d9\",\"FriendAvatar\":\"friends_FriendAvatar__14vU0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3HK3V\",\"loginBlock\":\"Header_loginBlock__bZGil\",\"logo\":\"Header_logo__2VHO1\",\"AvatarLoginBlock\":\"Header_AvatarLoginBlock__3-OLQ\",\"avatar\":\"Header_avatar__1jINK\",\"NavlinkButton\":\"Header_NavlinkButton__2jz4l\",\"checkboxAndButtonBlock\":\"Header_checkboxAndButtonBlock__wAWii\"};","export default __webpack_public_path__ + \"static/media/Spin-1s-200px.424ecdff.svg\";","import React from \"react\";\r\nimport preloader from  \"../../../assets/images/Spin-1s-200px.svg\";\r\nimport s from \"./Preloader.module.css\"\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport {SyncLoader} from \"react-spinners\";\r\nimport {css} from \"@emotion/react\";\r\n\r\nlet Preloader = () => {\r\n\r\n     const override = css`\r\n  display: block;\r\n          z-index: 1000;\r\n          position: fixed;\r\n  margin: 250px 400px;\r\n  border-color: red;\r\n          \r\n`;\r\nreturn <div className={s.loaderBlock}>\r\n     <div className={s.loader}>\r\n          <SyncLoader color={\"#7D93C5\"}   css={override} size={20} />\r\n\r\n          {/*<Box sx={{width: '100%'}}>*/}\r\n          {/*     <LinearProgress/>*/}\r\n          {/*</Box>*/}\r\n     {/*<img alt={\"preloader\"} className={s.img} src={preloader} />*/}\r\n     </div>\r\n</div>\r\n}\r\n\r\nexport default Preloader;","export  const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u.objPropName === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n\r\n}\r\n\r\n","import {usersAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UsersType} from \"../types/Types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number| null >\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst usersReducers = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = FollowSuccessType | unfollowSuccessType | setUsersType | setCurrentPageType | setTotalUsersCountType\r\n    | toggleIsFetchingType | toggleFollowingProgressType\r\n\r\n\r\n\r\ntype FollowSuccessType = {\r\n    type: typeof FOLLOW\r\n    userId: number | null\r\n}\r\nexport const followSuccess = (userId: number | null): FollowSuccessType => ({type: FOLLOW, userId})\r\ntype unfollowSuccessType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number | null\r\n}\r\nexport const unfollowSuccess = (userId: number | null): unfollowSuccessType => ({type: UNFOLLOW, userId})\r\ntype setUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\nexport const setUsers = (users: Array<UsersType>): setUsersType => ({type: SET_USERS, users})\r\ntype setCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageType => ({type: SET_CURRENT_PAGE, currentPage})\r\ntype setTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountType =>\r\n    ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\n\r\nexport type toggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n    }\r\nexport const toggleIsFetching = (isFetching:boolean):toggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\n\r\ntype toggleFollowingProgressType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number | null\r\n}\r\nexport const toggleFollowingProgress = (isFetching:boolean, userId: number | null):toggleFollowingProgressType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n})\r\n\r\nexport const requestUsers = (page:number, pageSize:number):ThunkActionType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        dispatch(setCurrentPage(page));\r\n    }\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, any , ActionType>\r\n\r\nconst followUnfollowFlow = async (dispatch:DispatchType, userId:number | null, apiMethod:any,\r\n                                  actionCreator: (userId:number | null)=> FollowSuccessType | unfollowSuccessType ) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\n\r\nexport const follow = (userId:number | null):ThunkActionType => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId:number | null):ThunkActionType => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unFollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducers;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderBlock\":\"Preloader_loaderBlock__goia-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__DEcqA\",\"friends\":\"Sidebar_friends__3om7u\"};","import {profileAPI, usersAPI} from \"../API/api\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/Types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SET_PHOTO = 'SET_PHOTO';\r\nconst SET_PROFILE_ERROR = 'SET_PROFILE_ERROR';\r\nconst SET_EDIT_MODE = 'SET_EDIT_MODE';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'First post', count: 5, discount: 0},\r\n        {id: 2, message: 'Second post', count: 7, discount: 1},\r\n        {id: 3, message: 'Third post', count: 8, discount: 10},\r\n        {id: 4, message: 'Forth post', count: 9, discount: 4},\r\n        {id: 5, message: 'Fifth post', count: 10, discount: 2},\r\n        {id: 6, message: 'Six post', count: 11, discount: 3},\r\n        {id: 7, message: 'Seven post', count: 14, discount: 4},\r\n        {id: 8, message: 'Eight post', count: 15, discount: 2},\r\n        {id: 9, message: 'Nine post', count: 7, discount: 2}\r\n    ] as Array <PostsType>,\r\n    profile: null as ProfileType | null,\r\n    editMode: false,\r\n    status: \"\" as string,\r\n    error: \"\" as string\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action:ProfileActionType):InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 10,\r\n                message: action.newPost,\r\n                count: 0, discount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.id)\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_PHOTO: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        }\r\n        case SET_PROFILE_ERROR: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, error: action.error} as ProfileType\r\n            };\r\n        }\r\n        case SET_EDIT_MODE: {\r\n            return {\r\n                ...state,\r\n                editMode: action.editMode\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n//Типизация Action\r\ntype ProfileActionType = AddPostActionCreatorType | DeletePostType | SetUserProfileType | SetStatusType |\r\n    savePhotoSuccessType | saveProfileErrorType | setEditModeType\r\n// типизация Санок\r\ntype DispatchType = Dispatch<ProfileActionType>\r\ntype ThunkActionType  = ThunkAction<Promise<void>, AppStateType, any , ProfileActionType>;\r\n\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    newPost: string\r\n}\r\nexport const addPostActionCreator = (newPost:string):AddPostActionCreatorType => ({type: ADD_POST, newPost})\r\n\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST\r\n    id: number\r\n}\r\nexport const deletePost = (id:number):DeletePostType => ({type: DELETE_POST, id})\r\n\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile:ProfileType):SetUserProfileType => ({type: SET_USER_PROFILE, profile})\r\n\r\ntype SetStatusType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status:string):SetStatusType => ({type: SET_STATUS, status})\r\n\r\ntype savePhotoSuccessType = {\r\n    type: typeof SET_PHOTO\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType):savePhotoSuccessType => ({type: SET_PHOTO, photos})\r\n\r\ntype saveProfileErrorType = {\r\n    type: typeof SET_PROFILE_ERROR\r\n    error: string\r\n}\r\nexport const saveProfileError = (error:string):saveProfileErrorType => ({type: SET_PROFILE_ERROR, error})\r\n\r\ntype setEditModeType = {\r\n    type: typeof SET_EDIT_MODE\r\n    editMode: boolean\r\n}\r\nexport const setEditMode = (editMode:boolean):setEditModeType => ({type: SET_EDIT_MODE, editMode})\r\n\r\nexport const getUserProfile = (userId: number | null):ThunkActionType => async (dispatch:DispatchType) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus = (userId:number | null) => async (dispatch:DispatchType) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n}\r\nexport const updateStatus = (status:string) => async (dispatch:DispatchType) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\nexport const saveProfileForm = (profile:ProfileType):ThunkActionType =>\r\n    async (dispatch, getState) => {\r\n    let userId = getState().auth.userId\r\n    let response = await profileAPI.saveProfile(profile);\r\n    if (response.status === 500) {\r\n        dispatch(saveProfileError(\"Ошибка сервера.Статус: \" + response.status + \"  Сообщение сервера:  \" +\r\n            response.data.message))\r\n    }\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n        dispatch(setEditMode(false));\r\n    }\r\n    if (response.data.resultCode === 1) {\r\n        dispatch(saveProfileError(response.data.messages))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const savePhoto = (file: File) => async (dispatch:DispatchType) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === 0) {\r\n        let photos = response.data.data.photos;\r\n        dispatch(savePhotoSuccess(photos));\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;"],"sourceRoot":""}